name: CD

on:
  push:
    branches: [main]

env:
  NODE_VERSION: 20

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get latest version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image with version and latest tags
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/eshop
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          docker build -t $IMAGE:$VERSION -t $IMAGE:latest .
          docker push $IMAGE:$VERSION

  deploy:
    name: Deploy to Minikube using Helm
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest

      - name: Update Helm values with new image tag
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/eshop
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          sed -i "s|repository:.*|repository: $IMAGE|" helm-chart/values.yaml
          sed -i "s|tag:.*|tag: \"$VERSION\"|" helm-chart/values.yaml

      - name: Deploy with Helm
        run: |
          helm upgrade --install eshop ./helm-chart --namespace default --create-namespace