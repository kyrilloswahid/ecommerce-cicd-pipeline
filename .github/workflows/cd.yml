name: CD Pipeline

on:
  push:
    branches: [main]

env:
  NODE_VERSION: 20

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

      - name: Run end-to-end tests
        run: npm test -- --ci --coverage

  release:
    name: Semantic Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  build_and_push:
    name: Build and Push Docker Image
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eshop:${{ needs.release.outputs.new-release-version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/eshop:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Minikube
    needs: [release, build_and_push]
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 'latest'
          driver: docker
          container-runtime: docker
          kubernetes-version: 'stable'

      - name: Deploy to Minikube with Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          helm upgrade --install eshop ./helm-chart \
            --set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/eshop \
            --set image.tag=${{ needs.release.outputs.new-release-version }} \
            --wait --timeout=300s

      - name: Get application URL
        id: get-url
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/eshop-eshop-microservice
          
          MINIKUBE_IP=$(minikube ip)
          NODE_PORT=$(kubectl get service eshop-eshop-microservice -o jsonpath='{.spec.ports[0].nodePort}')
          APP_URL="http://${MINIKUBE_IP}:${NODE_PORT}"
          
          echo "app-url=${APP_URL}" >> $GITHUB_OUTPUT
          echo "Application deployed successfully!"
          echo "Access your application at: ${APP_URL}"