name: CD

on:
  push:
    branches: [main]

env:
  IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/eshop
  NODE_VERSION: 20

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

  semantic-release-and-docker:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    env:
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/eshop
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release and get version
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image with version tag
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          docker build -t $IMAGE:${VERSION#v} -t $IMAGE:latest .
          docker push $IMAGE:${VERSION#v}
          docker push $IMAGE:latest

      - name: Simulate Kubernetes deployment
        run: |
          echo "Simulating deployment to Kubernetes..."
          echo "kubectl apply -f helm-chart/templates/deployment.yml"
          # Uncomment the next line to actually deploy if kubectl is configured
          # kubectl apply -f helm-chart/templates/deployment.yml